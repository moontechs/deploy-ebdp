name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to'
        required: true
        type: choice
        # should be uppercase to match the secret names
        options:
          - PRODUCTION
          - STAGING
        default: STAGING
      tag_version:
        description: 'Tag version for the image'
        required: true
        default: '0.2.14'

jobs:
  check-and-build:
    name: Check image and build if needed
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.check-image.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check-image
        run: |
          if docker manifest inspect ghcr.io/moontechs/event-based-dating-platform:${{ github.event.inputs.tag_version }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image does not exist, will trigger build workflow"
          fi

      - name: Trigger build workflow
        if: steps.check-image.outputs.exists == 'false'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Build Club
          ref: main
          inputs: '{"tag_version": "${{ github.event.inputs.tag_version }}"}'
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: check-and-build
    env:
      SSH_KEY_PATH: /tmp/ssh_key
      TAG_VERSION: ${{ github.event.inputs.tag_version }}
      ENV_PREFIX: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Make app envfile
        run: |
          grep "secret_${{env.ENV_PREFIX}}_" | sed "s/declare -x secret_${{env.ENV_PREFIX}}_//" > .env
          echo "APP_ENV: $(echo ${{ env.ENV_PREFIX }} | tr '[:upper:]' '[:lower:]')" >> .env

        env:
          secret_APP_NAME: ${{ secrets[format('{0}_APP_NAME', env.ENV_PREFIX)] }}
          secret_APP_DEBUG: ${{ secrets[format('{0}_APP_DEBUG', env.ENV_PREFIX)] }}
          secret_APP_FALLBACK_LOCALE: en
          secret_APP_KEY: ${{ secrets[format('{0}_APP_KEY', env.ENV_PREFIX)] }}
          secret_APP_LOCALE: en
          secret_APP_MAINTENANCE_DRIVER: file
          secret_APP_URL: ${{ secrets[format('{0}_APP_URL', env.ENV_PREFIX)] }}
          secret_BCRYPT_ROUNDS: 12
          secret_BROADCAST_CONNECTION: log
          secret_CACHE_STORE: file
          secret_DB_CONNECTION: pgsql
          secret_DB_DATABASE: ${{ secrets[format('{0}_DB_DATABASE', env.ENV_PREFIX)] }}
          secret_DB_HOST: ${{ secrets[format('{0}_DB_HOST', env.ENV_PREFIX)] }}
          secret_DB_PASSWORD: ${{ secrets[format('{0}_DB_PASSWORD', env.ENV_PREFIX)] }}
          secret_DB_PORT: ${{ secrets[format('{0}_DB_PORT', env.ENV_PREFIX)] }}
          secret_DB_USERNAME: ${{ secrets[format('{0}_DB_USERNAME', env.ENV_PREFIX)] }}
          secret_FILESYSTEM_DISK: public
          secret_LOG_CHANNEL: stdout
          secret_LOG_DEPRECATIONS_CHANNEL: null
          secret_LOG_LEVEL: ${{ secrets[format('{0}_LOG_LEVEL', env.ENV_PREFIX)] }}
          secret_LOG_STACK: stack
          secret_MAIL_ENCRYPTION: tls
          secret_MAIL_FROM_ADDRESS: ${{ secrets[format('{0}_MAIL_FROM_ADDRESS', env.ENV_PREFIX)] }}
          secret_MAIL_FROM_NAME: ${APP_NAME}
          secret_MAIL_HOST: ${{ secrets[format('{0}_MAIL_HOST', env.ENV_PREFIX)] }}
          secret_MAIL_MAILER: smtp
          secret_MAIL_PASSWORD: ${{ secrets[format('{0}_MAIL_PASSWORD', env.ENV_PREFIX)] }}
          secret_MAIL_PORT: ${{ secrets[format('{0}_MAIL_PORT', env.ENV_PREFIX)] }}
          secret_MAIL_SCHEME: null
          secret_MAIL_USERNAME: ${{ secrets[format('{0}_MAIL_USERNAME', env.ENV_PREFIX)] }}
          secret_PHP_CLI_SERVER_WORKERS: 4
          secret_QUEUE_CONNECTION: redis
          secret_REDIS_CLIENT: phpredis
          secret_REDIS_HOST: ${{ secrets[format('{0}_REDIS_HOST', env.ENV_PREFIX)] }}
          secret_REDIS_PASSWORD: null
          secret_REDIS_PORT: ${{ secrets[format('{0}_REDIS_PORT', env.ENV_PREFIX)] }}
          secret_SENTRY_LARAVEL_DSN: ${{ secrets[format('{0}_SENTRY_LARAVEL_DSN', env.ENV_PREFIX)] }}
          secret_SESSION_DOMAIN: null
          secret_SESSION_DRIVER: database
          secret_SESSION_ENCRYPT: true
          secret_SESSION_LIFETIME: ${{ secrets[format('{0}_SESSION_LIFETIME', env.ENV_PREFIX)] }}
          secret_SESSION_PATH: /
          secret_VITE_APP_NAME: ${APP_NAME}

      - name: Make postgres envfile
        run: export | grep "secret_" | sed "s/declare -x secret_//" > .postgres_env
        env:
          secret_POSTGRES_PASSWORD: ${{ secrets[format('{0}_DB_PASSWORD', env.ENV_PREFIX)] }}
          secret_POSTGRES_USER: ${{ secrets[format('{0}_DB_USERNAME', env.ENV_PREFIX)] }}
          secret_POSTGRES_DB: ${{ secrets[format('{0}_DB_DATABASE', env.ENV_PREFIX)] }}

      - name: Make cloudflare envfile
        run: export | grep "secret_" | sed "s/declare -x secret_//" > .cloudflare_env
        env:
          secret_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - run: echo "TAG_VERSION=${{ github.event.inputs.tag_version }}" >> .env

      - run: echo ${{ env.ENV_PREFIX }}

      - run: |
          echo "${{ secrets[format('{0}_SSH_KEY', env.ENV_PREFIX)] }}" > ${{ env.SSH_KEY_PATH }}
          chmod 600 ${{ env.SSH_KEY_PATH }}

      - run: scp -o StrictHostKeyChecking=no -i ${{ env.SSH_KEY_PATH }} .env ${{ secrets[format('{0}_SSH_USERNAME', env.ENV_PREFIX)] }}@${{ secrets[format('{0}_SSH_HOST', env.ENV_PREFIX)] }}:/home/deploy/club/.env

      - run: scp -o StrictHostKeyChecking=no -i ${{ env.SSH_KEY_PATH }} .postgres_env ${{ secrets[format('{0}_SSH_USERNAME', env.ENV_PREFIX)] }}@${{ secrets[format('{0}_SSH_HOST', env.ENV_PREFIX)] }}:/home/deploy/database/.env

      - run: scp -o StrictHostKeyChecking=no -i ${{ env.SSH_KEY_PATH }} .cloudflare_env ${{ secrets[format('{0}_SSH_USERNAME', env.ENV_PREFIX)] }}@${{ secrets[format('{0}_SSH_HOST', env.ENV_PREFIX)] }}:/home/deploy/cloudflare/.env

      - run: |
          export LOWER_ENV_PREFIX=$(echo ${{ env.ENV_PREFIX }} | tr '[:upper:]' '[:lower:]')
          scp -o StrictHostKeyChecking=no -i ${{ env.SSH_KEY_PATH }} ./docker-compose.${LOWER_ENV_PREFIX}".yml ${{ secrets[format('{0}_SSH_USERNAME', env.ENV_PREFIX)] }}@${{ secrets[format('{0}_SSH_HOST', env.ENV_PREFIX)] }}:/home/deploy/club/docker-compose.yml

      - run: ssh -i ${{ env.SSH_KEY_PATH }} ${{ secrets[format('{0}_SSH_USERNAME', env.ENV_PREFIX)] }}@${{ secrets[format('{0}_SSH_HOST', env.ENV_PREFIX)] }} "cd /home/deploy/club && docker pull ghcr.io/moontechs/event-based-dating-platform:${{ github.event.inputs.tag_version }} && docker compose -f docker-compose.yml --env-file=.env up -d && docker system prune --all --force"
